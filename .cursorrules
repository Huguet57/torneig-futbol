# Instructions

During you interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

You should also use the `.cursorrules` file as a scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Lessons

## User Specified Lessons

- Use poetry to run tests or anything python related.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Use Ruff for linting and formatting Python code as it's faster and more comprehensive than flake8/black
- Set up pre-commit hooks to ensure code quality before committing changes
- Create shell scripts for common development tasks to improve workflow efficiency
- Document code quality practices in a separate file for better onboarding
- Address linting issues incrementally, starting with auto-fixable ones
- Pay attention to SQLAlchemy and Pydantic deprecation warnings to future-proof the codebase
- The simpler the implementation, the better
- Always develop a module and add the tests just after. Don't add several modules that can be filled with errors

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When running tests, make sure PYTHONPATH includes the source directory to resolve imports correctly
- Even with correct poetry package configuration (packages = [{include = "package", from="src"}]), tests may need PYTHONPATH to include the project root to find the package
- When creating architectural plans, always include testing strategy and iterative development approach with feedback cycles
- Break down large documentation into separate files for better organization and easier reference
- In SQLAlchemy, joinedload is imported from sqlalchemy.orm and not a method of the Session object. Always import it separately: from sqlalchemy.orm import joinedload
- When writing APIs that return related objects, use joinedload to eagerly load relationships to avoid N+1 query issues and ensure related objects are included in responses
- When writing test scripts for API endpoints, make sure to use the correct API routes with proper prefixes (e.g., '/api/tournaments/' instead of '/tournaments/')
- Include status checks in test scripts to ensure proper error handling and debugging

# Scratchpad

## Soccer Tournament Management System

Previous task: Implementing MVP 1 - Tournament and Team Structure ✅
Current task: Implementing MVP 2 - Match Management ✅

[X] Set up project structure
  [X] Create directory structure
  [X] Configure Poetry dependencies
  [X] Set up Ruff linting

[X] Set up database models
  [X] Create base database configuration
  [X] Implement Tournament model
  [X] Implement Team model
  [X] Implement Phase model
  [X] Implement Group model
  [X] Implement Player model (basic)
  [X] Implement Match model (basic)

[X] Create API endpoints for MVP 1
  [X] Create base CRUD operations class
  [X] Implement Tournament endpoints
  [X] Implement Team endpoints
  [X] Implement Phase endpoints
  [X] Implement Group endpoints with team assignment

[X] Add unit tests for MVP 1
  [X] Set up test configuration
  [X] Create test fixtures
  [X] Test Tournament API endpoints
  [X] Test Team API endpoints
  [X] Test Group-Team relationships
  [X] Fix failing tests in group-team relationship

[X] Database migrations
  [X] Create Alembic configuration
  [X] Set up migration environment

[X] Add simple UI for MVP 1
  [X] Create base templates
  [X] Implement tournament management UI
  [X] Add CSS styling

[X] MVP 2: Match Management
  [X] Create match schemas
    [X] Create Match schema with validation
    [X] Create MatchCreate and MatchUpdate schemas
    [X] Add match result schema
  [X] Implement Match API endpoints
    [X] Create match CRUD operations
    [X] Implement match listing endpoints (by tournament, phase, group)
    [X] Add endpoint for updating match results
  [X] Implement Team Standing model/schema
    [X] Create standing model for storing group standings
    [X] Implement logic for calculating standings
    [X] Create API endpoints for retrieving standings
  [X] Add unit tests for match functionality
    [X] Test match CRUD operations
    [X] Test match listing by relationship (tournament, phase, group)
    [X] Test standings calculation
    [X] Test match result updates
  [X] Create Match UI
    [X] Implement match listing view
    [X] Add match creation form
    [X] Create match detail view with result updates

[X] Documentation
  [X] Update API endpoint documentation with match details
  [X] Create detailed match management documentation
  [X] Update README with project status

[X] Test the complete match management workflow
  [X] Verify match creation and listing
  [X] Test match result updates and standings calculation
  [X] Validate UI functionality for match management
  [X] Create and run end-to-end test script

Next steps:
1. Plan MVP 3 implementation (Player Statistics and Reporting)
2. Implement player statistics tracking
3. Create reporting functionality

Notes:
- Match management functionality is now complete with comprehensive documentation
- API endpoints for matches and standings are fully documented
- README has been updated to reflect current project status
- End-to-end test script successfully validates the match management workflow
- The test script demonstrates the complete workflow from tournament creation to standings calculation
- Next phase will focus on player statistics and reporting features